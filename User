package com.cayden.socialMediaApi.entity;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

@Entity
public class User {
	
	private Long id; //id of each user
	private String username; //username of user
	private String profilePictureUrl; //?
	
	@JsonIgnore
	private Set<User> following; //this will be a set of users
	
	private String password;//password
	@JsonIgnore
	private Set <Post> posts; // This will be a set of posts that has all the cahractersitics of the class post (ID, content, date, user, comments (list of comments)
	@JsonIgnore
	private Set <Comment> comments; //set of comments that has a list of items with the charactersitics of comments (id, content, date, user , post)
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getProfilePictureUrl() {
		return profilePictureUrl;
	}
	public void setProfilePictureUrl(String profilePictureUrl) {
		this.profilePictureUrl = profilePictureUrl;
	}
	@JsonIgnore //users password is never serialized and returned as the result of an API call
	public String getPassword() {
		return password;
	}
	@JsonProperty //WE do want our user to be able to enter in their password when they are registering for the program, @jsonproperty allows this to happen
	public void setPassword(String password) {
		this.password = password;
	}
	@OneToMany (mappedBy = "user")
	public Set <Post> getPosts() {
		return posts;
	}
	public void setPosts(Set <Post> posts) {
		this.posts = posts;
	}
	@OneToMany(mappedBy = "user")
	public Set <Comment> getComments() {
		return comments;
	}
	public void setComments(Set <Comment> comments) {
		this.comments = comments;
	}
	
	
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "folliwing",
		joinColumns = @JoinColumn(name = "userId", referencedColumnName = "id"),
		inverseJoinColumns = @JoinColumn(name = "folloiwngId", referencedColumnName = "id"))
	
	public Set<User> getFollowing() {
		return following;
	}
	public void setFollowing(Set<User> following) {
		this.following = following;
	}
	
}
